generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?
  accounts      Account[]
  sessions      Session[]
  clients       Client[]
  projects      Project[]
  invoices      Invoice[]
  timeEntries   TimeEntry[]
  expenses      Expense[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Client {
  id        String    @id @default(cuid())
  name      String
  email     String
  company   String?
  phone     String?
  address   String?
  userId    String
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  projects  Project[]
  invoices  Invoice[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Project {
  id          String    @id @default(cuid())
  name        String
  description String?
  status      String    @default("active") // active, completed, on-hold
  rate        Float?
  clientId    String
  client      Client    @relation(fields: [clientId], references: [id], onDelete: Cascade)
  userId      String
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  invoices    Invoice[]
  timeEntries TimeEntry[]
  expenses    Expense[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Invoice {
  id            String    @id @default(cuid())
  number        String    @unique
  amount        Float
  status        String    @default("draft") // draft, sent, paid, overdue
  dueDate       DateTime
  issuedDate    DateTime  @default(now())
  description   String?
  clientId      String
  client        Client    @relation(fields: [clientId], references: [id])
  projectId     String?
  project       Project?  @relation(fields: [projectId], references: [id])
  userId        String
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  stripePaymentId String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model TimeEntry {
  id          String    @id @default(cuid())
  description String?
  hours       Float
  date        DateTime  @default(now())
  startTime   DateTime?
  endTime     DateTime?
  isRunning   Boolean   @default(false)
  projectId   String
  project     Project   @relation(fields: [projectId], references: [id], onDelete: Cascade)
  userId      String
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Expense {
  id          String    @id @default(cuid())
  description String
  amount      Float
  category    String    // travel, software, materials, meals, etc.
  date        DateTime  @default(now())
  receipt     String?   // URL to receipt file
  isReimbursable Boolean @default(false)
  isBillable  Boolean   @default(false) // Can be billed to client
  projectId   String?   // Optional project association
  project     Project?  @relation(fields: [projectId], references: [id], onDelete: SetNull)
  userId      String
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}